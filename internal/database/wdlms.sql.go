// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: wdlms.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createWdlm = `-- name: CreateWdlm :one
INSERT INTO wdlms (
    name
) VALUES (
    $1
)
RETURNING id, name, created_at, updated_at, last_seen_at
`

func (q *Queries) CreateWdlm(ctx context.Context, name string) (Wdlm, error) {
	row := q.db.QueryRowContext(ctx, createWdlm, name)
	var i Wdlm
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.LastSeenAt,
	)
	return i, err
}

const deleteWdlmByID = `-- name: DeleteWdlmByID :exec
DELETE FROM wdlms
WHERE id = $1
`

func (q *Queries) DeleteWdlmByID(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteWdlmByID, id)
	return err
}

const getWdlmByID = `-- name: GetWdlmByID :one
SELECT id, name, created_at, updated_at, last_seen_at FROM wdlms
WHERE id = $1
`

func (q *Queries) GetWdlmByID(ctx context.Context, id uuid.UUID) (Wdlm, error) {
	row := q.db.QueryRowContext(ctx, getWdlmByID, id)
	var i Wdlm
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.LastSeenAt,
	)
	return i, err
}

const getWdlms = `-- name: GetWdlms :many
SELECT id, name, created_at, updated_at, last_seen_at FROM wdlms
`

func (q *Queries) GetWdlms(ctx context.Context) ([]Wdlm, error) {
	rows, err := q.db.QueryContext(ctx, getWdlms)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Wdlm
	for rows.Next() {
		var i Wdlm
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.LastSeenAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateWdlm = `-- name: UpdateWdlm :one
UPDATE wdlms
SET name = $2, updated_at = NOW()
WHERE id = $1
RETURNING id, name, created_at, updated_at, last_seen_at
`

type UpdateWdlmParams struct {
	ID   uuid.UUID
	Name string
}

func (q *Queries) UpdateWdlm(ctx context.Context, arg UpdateWdlmParams) (Wdlm, error) {
	row := q.db.QueryRowContext(ctx, updateWdlm, arg.ID, arg.Name)
	var i Wdlm
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.LastSeenAt,
	)
	return i, err
}
